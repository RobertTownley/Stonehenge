'''Sample configuration file generated by the "stonehenge new" command

When the command 'stonehenge build' is run in the same directory as this file,
settings from this file will be used to create a new project. Set project
parameters here.

This script will be interpreted as python, so feel free to use imports and
modules to generate values. For example, the following code would result in
a project name of "Stonehenge Example 2018" (or whatever year it is):
import datetime
year = datetime.datetime.now().year
PROJECT_NAME = "Stonehenge Example {0}".format(year)
'''
import secrets

from django.utils.text import slugify

# REQUIRED SETTINGSs
PROJECT_NAME = 'Test Stonehenge'
GITHUB_REPOSITORY = 'git@github.com:RobertTownley/TestStonehenge.git'

# Optional Settings
PROJECT_AUTHOR = ""
PROJECT_DESCRIPTION = "Source code for the {0} project".format(PROJECT_NAME)
PROJECT_LICENSE = "ISC"
PROJECT_SLUG = slugify(PROJECT_NAME.lower()).replace("-", "_")
PROJECT_VERSION = '1.0.0'
VIRTUAL_ENVIRONMENT_NAME = 'ENV'
DJANGO_SETTINGS = {
    'PROJECT_NAME': 'app'  # Set to "PROJECT_SLUG for a standard Django layout
}


def generate_pass(length=31):
    '''Semi-secure method for generating passwords.

    Feel free to implement your own below.
    '''
    return secrets.token_hex(length)


# Deployment settings
PRODUCTION_IP = 'CHANGEME'
STAGING_IP = 'CHANGEME'

ENVIRONMENTS = {
    'LOCAL': {
        'DATABASE': {
            'USER': PROJECT_SLUG,
            'NAME': PROJECT_SLUG + "db",
            'PASSWORD': generate_pass(),
            'HOST': 'localhost',
            'PORT': '5432',
        },
    },
    'PRODUCTION': {
        'ALLOWED_HOSTS': "['*']",
        'DATABASE': {
            'USER': PROJECT_SLUG,
            'NAME': PROJECT_SLUG + "db",
            'PASSWORD': generate_pass(),
            'HOST': PRODUCTION_IP,
            'PORT': '5432',
        },
        'HOSTNAME': '{0}ProductionAppserver'.format(PROJECT_SLUG),
        'HOST_IP': PRODUCTION_IP,
    },
    'STAGING': {
        'DATABASE': {
            'USER': PROJECT_SLUG,
            'NAME': PROJECT_SLUG + "db",
            'PASSWORD': generate_pass(),
            'HOST': STAGING_IP,
            'PORT': '5432',
        },
        'HOSTNAME': '{0}StagingAppserver'.format(PROJECT_SLUG),
        'HOST_IP': STAGING_IP,
    },
    'TESTING': {
        'DATABASE': {
            'USER': PROJECT_SLUG,
            'NAME': PROJECT_SLUG + "testdb",
            'HOST': 'localhost',
            'PORT': '5432',
        },
    },
}


# Database Settings
LOCAL_POSTGRES_PASSWORD = 'postgrespassword'

# PIP Settings
PIP_MODULES = [
    'Django>=2.0',
    'flake8',
    'psycopg2>=2.7',
    'django-extensions',
]

FEATURES = [
    'public',  # Public homepage, taken from presto templates
    'user_model',  # Custom user model
]


# Wrapping all of the above into project configuration
# You probably don't need to edit anything below this line unless you're doing
# more involved customization.
PROJECT_CONFIGURATION = {
    'DJANGO_SETTINGS': DJANGO_SETTINGS,
    'ENVIRONMENTS': ENVIRONMENTS,
    'FEATURES': FEATURES,
    'GITHUB_REPOSITORY': GITHUB_REPOSITORY,
    'PIP_MODULES': PIP_MODULES,
    'LOCAL_POSTGRES_PASSWORD': LOCAL_POSTGRES_PASSWORD,
    'PROJECT_AUTHOR': PROJECT_AUTHOR,
    'PROJECT_DESCRIPTION': PROJECT_DESCRIPTION,
    'PROJECT_LICENSE': PROJECT_LICENSE,
    'PROJECT_NAME': PROJECT_NAME,
    'PROJECT_SLUG': PROJECT_SLUG,
    'PROJECT_VERSION': PROJECT_VERSION,
    'VIRTUAL_ENVIRONMENT_NAME': VIRTUAL_ENVIRONMENT_NAME,
}
